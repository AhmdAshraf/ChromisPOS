//   Chromis POS - The New Face of Open Source POS 
//   Copyright (c) 2015 Chromis , previous uniCenta & Openbravo POS works   
//
//   This file is part of chromis oPOS
//
//   Chromis POS is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   Chromis POS is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with Chromis POS.  If not, see <http://www.gnu.org/licenses/>.
//		added by g.irura @ 27/03/2010. 
// 		CALCULATES PROFIT FOR EACH ITEM THAT IS SOLD AS WELL AS QUANTITY OF ITEMS OCCURRING IN THE PARTICULAR SALE
//		IF A PRICE ADJUSTMENT OCCURS, IT IS REFLECTED IN THE TRAIL OF RECEIPTS ON DATES. THE REPORT ALSO SHOWS THE TOTAL PROFITS MADE ON PRODUCTS/SERVICES SOLD

report = new uk.chromis.pos.reports.PanelReportBean();

report.setTitleKey("Menu.SalesProfit");
report.setReport("/uk/chromis/reports/productsalesprofit");
report.setResourceBundle("uk/chromis/reports/productsalesprofit_messages");


  

report.setSentence("SELECT products.REFERENCE, " +
       "products.NAME, " +
       "products.PRICEBUY, " +
       "products.PRICESELL, " +
       "SUM(ticketlines.UNITS) AS SOLD_UNITS, " +
       "SUM(ticketlines.UNITS * products.PRICEBUY) AS COST_VALUE, " +
       "SUM(ticketlines.UNITS * products.PRICESELL) AS EXPECTED_SALES_VALUE, " +
       "SUM(ticketlines.PRICE) AS ACTUAL_SALES_VALUE, " +
         "SUM(ticketlines.UNITS * products.PRICESELL) " +
       "- SUM(ticketlines.UNITS * products.PRICEBUY) " +
          "AS EXPECTED_PROFIT, " +
       "SUM(ticketlines.PRICE) - SUM(ticketlines.UNITS * products.PRICEBUY) " +
          "AS ACTUAL_PROFIT " +
  "FROM (ticketlines ticketlines " +
       "INNER JOIN receipts receipts " +
           "ON (ticketlines.TICKET = receipts.ID)) " +
       "LEFT OUTER JOIN products products " +
          "ON (ticketlines.PRODUCT = products.ID) " +
    "WHERE ?(QBF_FILTER) " +
    "GROUP BY ticketlines.PRODUCT " +
    "ORDER BY products.REFERENCE ASC");

report.addParameter("RECEIPTS.DATENEW");
report.addParameter("RECEIPTS.DATENEW");

paramdates = new uk.chromis.pos.reports.JParamsDatesInterval();

paramdates.setStartDate(uk.chromis.beans.DateUtils.getToday());
// JG - 8 Jan 14 paramdates.setEndDate(uk.chromis.beans.DateUtils.getToday());
paramdates.setEndDate(uk.chromis.beans.DateUtils.getTodayMinutes());

report.addQBFFilter(paramdates);

report.addField("REFERENCE", uk.chromis.data.loader.Datas.STRING);
report.addField("NAME", uk.chromis.data.loader.Datas.STRING);
report.addField("PRICEBUY", uk.chromis.data.loader.Datas.DOUBLE);
report.addField("PRICESELL", uk.chromis.data.loader.Datas.DOUBLE);
report.addField("SOLD_UNITS", uk.chromis.data.loader.Datas.DOUBLE);
report.addField("COST_VALUE", uk.chromis.data.loader.Datas.DOUBLE);
report.addField("EXPECTED_SALES_VALUE", uk.chromis.data.loader.Datas.DOUBLE);
report.addField("ACTUAL_SALES_VALUE", uk.chromis.data.loader.Datas.DOUBLE);
report.addField("EXPECTED_PROFIT", uk.chromis.data.loader.Datas.DOUBLE);
report.addField("ACTUAL_PROFIT", uk.chromis.data.loader.Datas.DOUBLE);


report;